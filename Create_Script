-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2020-05-14 16:08:30 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g

prompt #---------------------#
prompt #- Pomocne procedury -#
prompt #---------------------#

create or replace procedure SMAZ_VSECHNY_TABULKY AS
-- pokud v logu bude uvedeno, ze nektery objekt nebyl zrusen, protoze na nej jiny jeste existujici objekt stavi, spust proceduru opakovane, dokud se nezrusi vse
begin
  for iRec in 
    (select distinct OBJECT_TYPE, OBJECT_NAME,
      'drop '||OBJECT_TYPE||' "'||OBJECT_NAME||'"'||
      case OBJECT_TYPE when 'TABLE' then ' cascade constraints purge' else ' ' end as PRIKAZ
    from USER_OBJECTS where OBJECT_NAME not in ('SMAZ_VSECHNY_TABULKY', 'VYPNI_CIZI_KLICE', 'ZAPNI_CIZI_KLICE', 'VYMAZ_DATA_VSECH_TABULEK')
    ) loop
        begin
          dbms_output.put_line('Prikaz: '||irec.prikaz);
        execute immediate iRec.prikaz;
        exception
          when others then dbms_output.put_line('NEPOVEDLO SE!');
        end;
      end loop;
end;
/

create or replace procedure VYPNI_CIZI_KLICE as 
begin
  for cur in (select CONSTRAINT_NAME, TABLE_NAME from USER_CONSTRAINTS where CONSTRAINT_TYPE = 'R' ) 
  loop
    execute immediate 'alter table '||cur.TABLE_NAME||' modify constraint "'||cur.CONSTRAINT_NAME||'" DISABLE';
  end loop;
end VYPNI_CIZI_KLICE;
/


create or replace procedure ZAPNI_CIZI_KLICE as 
begin
  for cur in (select CONSTRAINT_NAME, TABLE_NAME from USER_CONSTRAINTS where CONSTRAINT_TYPE = 'R' ) 
  loop
    execute immediate 'alter table '||cur.TABLE_NAME||' modify constraint "'||cur.CONSTRAINT_NAME||'" enable validate';
  end loop;
end ZAPNI_CIZI_KLICE;
/

create or replace procedure VYMAZ_DATA_VSECH_TABULEK is
begin
  -- Vymazat data vsech tabulek
  VYPNI_CIZI_KLICE;
  for v_rec in (select distinct TABLE_NAME from USER_TABLES)
  loop
    execute immediate 'truncate table '||v_rec.TABLE_NAME||' drop storage';
  end loop;
  ZAPNI_CIZI_KLICE;
  
  -- Nastavit vsechny sekvence od 1
  for v_rec in (select distinct SEQUENCE_NAME  from USER_SEQUENCES)
  loop
    execute immediate 'alter sequence '||v_rec.SEQUENCE_NAME||' restart start with 1';
  end loop;
end VYMAZ_DATA_VSECH_TABULEK;
/

prompt #------------------------#
prompt #- Zrusit stare tabulky -#
prompt #------------------------#

exec SMAZ_VSECHNY_TABULKY;

prompt #-------------------------#
prompt #- Vytvorit nove tabulky -#
prompt #-------------------------#



CREATE TABLE active (
    id_player   INTEGER NOT NULL,
    active_from      DATE NOT NULL
);

ALTER TABLE active ADD CONSTRAINT active_pk PRIMARY KEY ( id_player );

CREATE TABLE analyst (
    field                  VARCHAR2(30) NOT NULL,
    id_employee   INTEGER NOT NULL
);

ALTER TABLE analyst ADD CONSTRAINT analyst_pk PRIMARY KEY ( id_employee );

CREATE TABLE banned (
    id_player   INTEGER NOT NULL,
    reason      VARCHAR2(50) NOT NULL,
    banned_from      DATE NOT NULL,
    untill      DATE
);

ALTER TABLE banned ADD CONSTRAINT banned_pk PRIMARY KEY ( id_player );

CREATE TABLE city (
    id_city              INTEGER NOT NULL,
    name                 VARCHAR2(20) NOT NULL,
    id_country   INTEGER NOT NULL
);

ALTER TABLE city ADD CONSTRAINT city_pk PRIMARY KEY ( id_city );

CREATE TABLE coach (
    id_coach       INTEGER NOT NULL,
    name           VARCHAR2(20) NOT NULL,
    surname        VARCHAR2(30) NOT NULL,
    age            INTEGER NOT NULL,
    id_team   INTEGER NOT NULL
);

ALTER TABLE coach ADD CONSTRAINT coach_pk PRIMARY KEY ( id_coach );

CREATE TABLE commentator (
    language               VARCHAR2(20) NOT NULL,
    id_employee   INTEGER NOT NULL
);

ALTER TABLE commentator ADD CONSTRAINT commentator_pk PRIMARY KEY ( id_employee );

CREATE TABLE country (
    id_country   INTEGER NOT NULL,
    name         VARCHAR2(20) NOT NULL
);

ALTER TABLE country ADD CONSTRAINT country_pk PRIMARY KEY ( id_country );

CREATE TABLE employee (
    id_employee                INTEGER NOT NULL,
    name                       VARCHAR2(20) NOT NULL,
    surname                    VARCHAR2(30) NOT NULL,
    age                        INTEGER NOT NULL,
    id_tournament   INTEGER NOT NULL,
    empl_type                  VARCHAR2(11 CHAR),
    salary                     INTEGER
);

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( id_employee );

CREATE TABLE location (
    id_location    INTEGER NOT NULL,
    name           VARCHAR2(30) NOT NULL,
    id_city   INTEGER NOT NULL
);

ALTER TABLE location ADD CONSTRAINT location_pk PRIMARY KEY ( id_location );

CREATE TABLE player (
    id_player      INTEGER NOT NULL,
    name           VARCHAR2(20) NOT NULL,
    surname        VARCHAR2(30) NOT NULL,
    nickname       VARCHAR2(20) NOT NULL,
    age            INTEGER NOT NULL,
    raiting        INTEGER,
    id_team   INTEGER,
    player_type    VARCHAR2(6) NOT NULL
);

ALTER TABLE player
    ADD CONSTRAINT ch_inh_player CHECK ( player_type IN (
        'Active',
        'Banned'
    ) );

ALTER TABLE player ADD CONSTRAINT player_pk PRIMARY KEY ( id_player );

ALTER TABLE player ADD CONSTRAINT player_raiting_un UNIQUE ( raiting );

CREATE TABLE result (
    id_result                  INTEGER NOT NULL,
    place                      INTEGER NOT NULL,
    medal                      VARCHAR2(15),
    id_tournament   INTEGER NOT NULL,
    id_team               INTEGER NOT NULL
);

ALTER TABLE result ADD CONSTRAINT result_pk PRIMARY KEY ( id_result );

CREATE TABLE sponsor (
    id_sponsor   INTEGER NOT NULL,
    name         VARCHAR2(30) NOT NULL
);

ALTER TABLE sponsor ADD CONSTRAINT sponsor_pk PRIMARY KEY ( id_sponsor );

CREATE TABLE sponsors (
    id_team         INTEGER NOT NULL,
    id_sponsor   INTEGER NOT NULL
);

ALTER TABLE sponsors ADD CONSTRAINT relation_12_pk PRIMARY KEY ( id_team,
                                                                 id_sponsor );

CREATE TABLE team (
    id_team   INTEGER NOT NULL,
    name      VARCHAR2(20) NOT NULL,
    raiting   INTEGER
);

ALTER TABLE team ADD CONSTRAINT team_pk PRIMARY KEY ( id_team );

CREATE TABLE tournament (
    id_tournament          INTEGER NOT NULL,
    name                   VARCHAR2(20) NOT NULL,
    start_date             DATE NOT NULL,
    end_date               DATE NOT NULL,
    prize_pool             INTEGER,
    id_location   INTEGER NOT NULL
);

ALTER TABLE tournament ADD CONSTRAINT tournament_pk PRIMARY KEY ( id_tournament );

ALTER TABLE active
    ADD CONSTRAINT active_player_fk FOREIGN KEY ( id_player )
        REFERENCES player ( id_player );

ALTER TABLE analyst
    ADD CONSTRAINT analyst_employee_fk FOREIGN KEY ( id_employee )
        REFERENCES employee ( id_employee );

ALTER TABLE banned
    ADD CONSTRAINT banned_player_fk FOREIGN KEY ( id_player )
        REFERENCES player ( id_player );

ALTER TABLE city
    ADD CONSTRAINT city_country_fk FOREIGN KEY ( id_country )
        REFERENCES country ( id_country );

ALTER TABLE coach
    ADD CONSTRAINT coach_team_fk FOREIGN KEY ( id_team )
        REFERENCES team ( id_team );

ALTER TABLE commentator
    ADD CONSTRAINT commentator_employee_fk FOREIGN KEY ( id_employee )
        REFERENCES employee ( id_employee );

ALTER TABLE employee
    ADD CONSTRAINT employee_tournament_fk FOREIGN KEY ( id_tournament )
        REFERENCES tournament ( id_tournament );

ALTER TABLE location
    ADD CONSTRAINT location_city_fk FOREIGN KEY ( id_city )
        REFERENCES city ( id_city );

ALTER TABLE player
    ADD CONSTRAINT player_team_fk FOREIGN KEY ( id_team )
        REFERENCES team ( id_team );

ALTER TABLE sponsors
    ADD CONSTRAINT relation_12_sponsor_fk FOREIGN KEY ( id_sponsor )
        REFERENCES sponsor ( id_sponsor );

ALTER TABLE sponsors
    ADD CONSTRAINT relation_12_team_fk FOREIGN KEY ( id_team )
        REFERENCES team ( id_team );

ALTER TABLE result
    ADD CONSTRAINT result_team_fk FOREIGN KEY ( id_team )
        REFERENCES team ( id_team );

ALTER TABLE result
    ADD CONSTRAINT result_tournament_fk FOREIGN KEY ( id_tournament )
        REFERENCES tournament ( id_tournament );

ALTER TABLE tournament
    ADD CONSTRAINT tournament_location_fk FOREIGN KEY ( id_location )
        REFERENCES location ( id_location );

CREATE OR REPLACE TRIGGER arc_fkarc_1_active BEFORE
    INSERT OR UPDATE OF id_player ON active
    FOR EACH ROW
DECLARE
    d VARCHAR2(6);
BEGIN
    SELECT
        a.player_type
    INTO d
    FROM
        player a
    WHERE
        a.id_player = :new.id_player;

    IF ( d IS NULL OR d <> 'Active' ) THEN
        raise_application_error(-20223, 'FK Active_Player_FK in Table Active violates Arc constraint on Table Player - discriminator column Player_TYPE doesn''t have value ''Active'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_banned BEFORE
    INSERT OR UPDATE OF id_player ON banned
    FOR EACH ROW
DECLARE
    d VARCHAR2(6);
BEGIN
    SELECT
        a.player_type
    INTO d
    FROM
        player a
    WHERE
        a.id_player = :new.id_player;

    IF ( d IS NULL OR d <> 'Banned' ) THEN
        raise_application_error(-20223, 'FK Banned_Player_FK in Table Banned violates Arc constraint on Table Player - discriminator column Player_TYPE doesn''t have value ''Banned'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_arc_1_commentator BEFORE
    INSERT OR UPDATE OF id_employee ON commentator
    FOR EACH ROW
DECLARE
    d VARCHAR2(11 CHAR);
BEGIN
    SELECT
        a.empl_type
    INTO d
    FROM
        employee a
    WHERE
        a.id_employee = :new.id_employee;

    IF ( d IS NULL OR d <> 'Commentator' ) THEN
        raise_application_error(-20223, 'FK Commentator_Employee_FK in Table Commentator violates Arc constraint on Table Employee - discriminator column empl_type doesn''t have value ''Commentator'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_arc_1_analyst BEFORE
    INSERT OR UPDATE OF id_employee ON analyst
    FOR EACH ROW
DECLARE
    d VARCHAR2(11 CHAR);
BEGIN
    SELECT
        a.empl_type
    INTO d
    FROM
        employee a
    WHERE
        a.id_employee = :new.id_employee;

    IF ( d IS NULL OR d <> 'Analyst' ) THEN
        raise_application_error(-20223, 'FK Analyst_Employee_FK in Table Analyst violates Arc constraint on Table Employee - discriminator column empl_type doesn''t have value ''Analyst'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            15
-- CREATE INDEX                             0
-- ALTER TABLE                             31
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           4
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0 
